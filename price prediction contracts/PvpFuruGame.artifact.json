{
  "contractName": "PvpFuruGame",
  "constructorInputs": [
    {
      "name": "maturityTimestamp",
      "type": "int"
    },
    {
      "name": "oraclePublicKey",
      "type": "pubkey"
    },
    {
      "name": "player1Pubkey",
      "type": "pubkey"
    },
    {
      "name": "player1DatasigHash",
      "type": "bytes32"
    },
    {
      "name": "player1LockingBytecode",
      "type": "bytes25"
    }
  ],
  "abi": [
    {
      "name": "payout",
      "inputs": [
        {
          "name": "player1PredictionMsg",
          "type": "bytes"
        },
        {
          "name": "player1Datasig",
          "type": "datasig"
        },
        {
          "name": "settlementMessage",
          "type": "bytes"
        },
        {
          "name": "settlementSignature",
          "type": "datasig"
        },
        {
          "name": "previousMessage",
          "type": "bytes"
        },
        {
          "name": "previousSignature",
          "type": "datasig"
        }
      ]
    },
    {
      "name": "timelockFallback",
      "inputs": []
    }
  ],
  "bytecode": "OP_5 OP_PICK OP_0 OP_NUMEQUAL OP_IF OP_7 OP_PICK OP_7 OP_PICK OP_4 OP_ROLL OP_CHECKDATASIGVERIFY OP_ROT OP_6 OP_ROLL OP_SHA256 OP_EQUALVERIFY OP_TXINPUTCOUNT OP_2 OP_NUMEQUALVERIFY OP_INPUTINDEX OP_0 OP_NUMEQUALVERIFY OP_0 OP_OUTPOINTTXHASH OP_1 OP_OUTPOINTTXHASH OP_EQUALVERIFY OP_1 OP_OUTPOINTINDEX OP_1 OP_NUMEQUALVERIFY OP_8 OP_ROLL OP_8 OP_PICK OP_3 OP_PICK OP_CHECKDATASIGVERIFY OP_6 OP_ROLL OP_6 OP_PICK OP_3 OP_ROLL OP_CHECKDATASIGVERIFY OP_5 OP_PICK OP_8 OP_SPLIT OP_NIP OP_4 OP_SPLIT OP_DROP OP_BIN2NUM OP_DUP OP_0 OP_GREATERTHAN OP_VERIFY OP_5 OP_PICK OP_8 OP_SPLIT OP_NIP OP_4 OP_SPLIT OP_DROP OP_BIN2NUM OP_1SUB OP_NUMEQUALVERIFY OP_5 OP_ROLL OP_4 OP_SPLIT OP_DROP OP_BIN2NUM OP_5 OP_PICK OP_4 OP_SPLIT OP_DROP OP_BIN2NUM OP_SWAP OP_2 OP_PICK OP_LESSTHAN OP_VERIFY OP_LESSTHANOREQUAL OP_VERIFY OP_3 OP_ROLL OP_12 OP_SPLIT OP_NIP OP_BIN2NUM OP_0 OP_UTXOTOKENCOMMITMENT OP_4 OP_SPLIT OP_5 OP_ROLL OP_4 OP_SPLIT OP_DROP OP_BIN2NUM OP_3 OP_PICK OP_SUB OP_ABS OP_ROT OP_BIN2NUM OP_3 OP_ROLL OP_SUB OP_ABS OP_1 OP_UTXOTOKENAMOUNT OP_2 OP_PICK OP_2 OP_PICK OP_NUMNOTEQUAL OP_IF OP_0 OP_OUTPUTTOKENAMOUNT OP_OVER OP_NUMEQUALVERIFY OP_4 OP_PICK OP_2OVER OP_GREATERTHAN OP_IF OP_4 OP_PICK OP_NIP OP_ENDIF OP_0 OP_OUTPUTBYTECODE OP_OVER OP_EQUALVERIFY OP_DROP OP_ELSE OP_0 OP_OUTPUTTOKENAMOUNT OP_OVER OP_2 OP_DIV OP_NUMEQUALVERIFY OP_0 OP_OUTPUTBYTECODE OP_5 OP_PICK OP_EQUALVERIFY OP_1 OP_OUTPUTTOKENAMOUNT OP_OVER OP_2 OP_DIV OP_NUMEQUALVERIFY OP_1 OP_OUTPUTBYTECODE OP_4 OP_PICK OP_EQUALVERIFY OP_ENDIF OP_2DROP OP_2DROP OP_2DROP OP_1 OP_ELSE OP_5 OP_ROLL OP_1 OP_NUMEQUALVERIFY 00ccbf19 OP_ADD OP_CHECKLOCKTIMEVERIFY OP_DROP OP_0 OP_UTXOVALUE e803 OP_SUB OP_0 OP_UTXOTOKENCOMMITMENT OP_8 OP_SPLIT OP_NIP OP_0 OP_OUTPUTVALUE OP_2 OP_PICK OP_2 OP_DIV OP_NUMEQUALVERIFY OP_0 OP_OUTPUTBYTECODE OP_6 OP_ROLL OP_EQUALVERIFY OP_1 OP_OUTPUTVALUE OP_ROT OP_2 OP_DIV OP_NUMEQUALVERIFY OP_1 OP_OUTPUTBYTECODE OP_EQUAL OP_NIP OP_NIP OP_NIP OP_ENDIF",
  "source": "pragma cashscript ^0.9.2;\n\n// Furu-Play smart contract\n// Two-player game where the goal is to most accurately predict the price of an asset some time in the future.\n// First Player1 makes a guru offer to predict the price for some asset at a certain time\n// This offer contract is funded and makes Player1 commit to his secret prediction\n// Secondly Player2 matches the funds locked in the Furu offer\n// He adds his prediction and payout address to the NFT of the Furu contract\n// Both players have now commited to their prediction inside the Furu contract\n// The prediction of Player1 is revealed at payout\n\n/*  ---NFT State---\n    bytes4 predictionPlayer2\n    bytes25 lockingBytecodePlayer2, // p2pkh lockingBytecode\n*/\n\ncontract PvpFuruGame(\n    int maturityTimestamp,\n    pubkey oraclePublicKey,\n    pubkey player1Pubkey,\n    bytes32 player1DatasigHash,\n    bytes25 player1LockingBytecode // p2pkh lockingBytecode\n) {\n    function payout(\n    \tbytes player1PredictionMsg,\n    \tdatasig player1Datasig, // revealed after contract creation\n    \tbytes settlementMessage,\n        datasig settlementSignature,\n        bytes previousMessage,\n        datasig previousSignature,\n    ) {\n    \t// Authenticate predictionPlayer1 with the hash its datasignature\n        require(checkDataSig(player1Datasig, player1PredictionMsg, player1Pubkey));\n        require(player1DatasigHash == sha256(player1Datasig));\n\n        // Check that there ar 2 inputs with Furu Contract at input index 0\n        require(tx.inputs.length == 2);\n        require(this.activeInputIndex == 0);\n\n        // Furu,Contract can only be moved along side FuruDepository\n        require(tx.inputs[0].outpointTransactionHash == tx.inputs[1].outpointTransactionHash);\n        require(tx.inputs[1].outpointIndex == 1);\n\n        // Authenticate the current and previous oracle message.\n        require(checkDataSig(previousSignature, previousMessage, oraclePublicKey));\n        require(checkDataSig(settlementSignature, settlementMessage, oraclePublicKey));\n\n        // Extract previous message's content sequence.\n        int previousSequence = int(previousMessage.split(8)[1].split(4)[0]);\n\n        // If the \"content sequence\" is negative it represents metadata rather than a price message\n        // and cannot be used inside the contract.\n        require(previousSequence > 0);\n\n        // Extract settlement message's content sequence.\n        int settlementSequence = int(settlementMessage.split(8)[1].split(4)[0]);\n\n        // Assert that the two messages connect without gaps.\n        require(settlementSequence - 1 == previousSequence);\n\n        // Extract the previous message's timestamp.\n        int previousTimestamp = int(previousMessage.split(4)[0]);\n        // Extract the settlement message's timestamp.\n        int settlementTimestamp = int(settlementMessage.split(4)[0]);\n\n        // Require previousTimestamp is before - and settlementTimestamp is after maturityTimestamp\n        require(previousTimestamp < maturityTimestamp);\n        require(settlementTimestamp >= maturityTimestamp);\n\n         // Extract the settlement message's price.\n        int oraclePrice = int(settlementMessage.split(12)[1]);\n\n        // Read Player2s prediction & lockingbytecode\n        bytes commitmentdata = tx.inputs[0].nftCommitment;\n        bytes predictionPlayer2Bytes, bytes player2LockingBytecode = commitmentdata.split(4);\n\n        // Read Player1s prediction\n        bytes predictionPlayer1Bytes = player1PredictionMsg.split(4)[0];\n        int predictionPlayer1 = int(predictionPlayer1Bytes);\n\n        // Calculate which player predicted the oracleprice at maturity better\n        int predictionErrorP1 = abs(predictionPlayer1 - oraclePrice);\n        int player2Prediction = int(predictionPlayer2Bytes);\n        int predictionErrorP2 = abs(player2Prediction - oraclePrice);\n\n        // No need for platform fees\n        // Getting total furu amount through introspection\n        int furuTotal = tx.inputs[1].tokenAmount;\n\n        // Other payout address is the player who was close to the settlet oracle price\n        // Or a 50-50 return when both players were just equally far off.\n        if (predictionErrorP1 != predictionErrorP2) {\n            require(tx.outputs[0].tokenAmount == furuTotal);\n            bytes LockingBytecodePayout = player1LockingBytecode;\n            if(predictionErrorP1 > predictionErrorP2) LockingBytecodePayout = player2LockingBytecode;\n            require(tx.outputs[0].lockingBytecode == LockingBytecodePayout);\n        } else {\n            require(tx.outputs[0].tokenAmount == furuTotal / 2);\n            require(tx.outputs[0].lockingBytecode == player1LockingBytecode);\n            require(tx.outputs[1].tokenAmount == furuTotal / 2);\n            require(tx.outputs[1].lockingBytecode == player2LockingBytecode);\n        }\n    }\n    // If settlement fails to take place for 5 days, there is a fallback available which returns the funds to the players 50-50\n    // This could be used in case the oracle service fails or the settlement service would stop working\n    function timelockFallback(){\n        // Timelock for 5 days after the normal maturity timestamp\n        require(tx.time >= maturityTimestamp + 432000000);\n\n        // Calculate total output amount after miner fee\n        int totalOuputAmount = tx.inputs[0].value - 1000;\n\n        // Read Player2s lockingbytecode\n        bytes commitmentdata = tx.inputs[0].nftCommitment;\n        bytes player2LockingBytecode = commitmentdata.split(8)[1];\n\n        // Funds are then returned 50-50 to the players\n        require(tx.outputs[0].value == totalOuputAmount / 2);\n        require(tx.outputs[0].lockingBytecode == player1LockingBytecode);\n        require(tx.outputs[1].value == totalOuputAmount / 2);\n        require(tx.outputs[1].lockingBytecode == player2LockingBytecode);\n    }\n}\n",
  "compiler": {
    "name": "cashc",
    "version": "0.9.2"
  },
  "updatedAt": "2024-07-23T03:23:41.632Z"
}
